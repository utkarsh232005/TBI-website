// src/app/admin/events/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { CalendarIcon, PlusCircle, Loader2, AlertCircle, Edit, Trash2 } from "lucide-react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { format } from "date-fns";
import { useToast } from "@/hooks/use-toast";
import { db } from '@/lib/firebase';
import { collection, addDoc, getDocs, serverTimestamp, Timestamp, orderBy, query } from 'firebase/firestore';
import { createEventAction } from '@/app/actions/event-actions';

const eventFormSchema = z.object({
  title: z.string().min(3, { message: "Title must be at least 3 characters." }),
  description: z.string().min(10, { message: "Description must be at least 10 characters." }),
  date: z.date({ required_error: "Event date is required." }),
  time: z.string().regex(/^([01]\d|2[0-3]):([0-5]\d)$/, { message: "Time must be in HH:MM format (e.g., 14:30)." }),
  venue: z.string().min(3, { message: "Venue must be at least 3 characters." }),
  applyLink: z.string().url({ message: "Please enter a valid URL." }).optional().or(z.literal('')),
  imageUrl: z.string().url({ message: "Please enter a valid image URL." }).optional().or(z.literal('')),
});

type EventFormValues = z.infer<typeof eventFormSchema>;

export interface EventDocument {
  id: string;
  title: string;
  description: string;
  date: string;
  time: string;
  venue: string;
  applyLink?: string;
  imageUrl?: string;
  createdAt: Timestamp;
}

export default function AdminEventsPage() {
  const [events, setEvents] = useState<EventDocument[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const { toast } = useToast();

  const form = useForm<EventFormValues>({
    resolver: zodResolver(eventFormSchema),
    defaultValues: {
      title: "",
      description: "",
      date: undefined,
      time: "",
      venue: "",
      applyLink: "",
      imageUrl: "",
    },
  });

  const fetchEvents = async () => {
    setIsLoading(true);
    setError(null);
    try {
      const eventsCollection = collection(db, "events");
      const q = query(eventsCollection, orderBy("createdAt", "desc"));
      const querySnapshot = await getDocs(q);
      const fetchedEvents: EventDocument[] = [];
      querySnapshot.forEach((doc) => {
        const data = doc.data();
        fetchedEvents.push({
          id: doc.id,
          title: data.title,
          description: data.description,
          date: data.date,
          time: data.time,
          venue: data.venue,
          applyLink: data.applyLink,
          imageUrl: data.imageUrl,
          createdAt: data.createdAt,
        });
      });
      setEvents(fetchedEvents);
    } catch (err: any) {
      console.error("Error fetching events: ", err);
      setError("Failed to load events. " + err.message);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchEvents();
  }, []);

  async function onSubmit(values: EventFormValues) {
    setIsSubmitting(true);
    try {
      const result = await createEventAction(values);
      if (result.success) {
        toast({
          title: "Event Created",
          description: `Event "${values.title}" has been successfully created.`,
        });
        form.reset();
        setIsCreateDialogOpen(false);
        fetchEvents(); // Refresh the list
      } else {
        toast({
          title: "Creation Failed",
          description: result.message || "Could not create the event.",
          variant: "destructive",
        });
      }
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "An unexpected error occurred.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  }

  return (
    <div className="container mx-auto py-6">
      <Card className="bg-[#121212] border border-[#2A2A2A] shadow-[0_4px_20px_rgba(0,0,0,0.3)] rounded-2xl overflow-hidden">
        <CardHeader className="bg-[#1A1A1A] border-b border-[#2A2A2A]">
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-[#E0E0E0] text-2xl font-bold">EVENT MANAGEMENT</CardTitle>
              <CardDescription className="text-[#9CA3AF]">Create and manage events for TBI</CardDescription>
            </div>
            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
              <DialogTrigger asChild>
                <Button className="bg-[#4F46E5] hover:bg-[#4338CA] text-white rounded-lg px-6 py-2 shadow-[0_4px_10px_rgba(79,70,229,0.3)] transform transition-transform hover:scale-105">
                  <PlusCircle className="mr-2 h-4 w-4" />
                  New Event
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-[600px] bg-[#1A1A1A] border border-[#2A2A2A] text-[#E0E0E0] shadow-[0_8px_30px_rgba(0,0,0,0.4)] rounded-2xl">
                <DialogHeader>
                  <DialogTitle className="text-[#E0E0E0] text-xl font-semibold">Create New Event</DialogTitle>
                  <DialogDescription className="text-[#9CA3AF]">
                    Fill out the form below to create a new event for TBI.
                  </DialogDescription>
                </DialogHeader>
                <Form {...form}>
                  <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 py-4 max-h-[70vh] overflow-y-auto pr-2">
                    <FormField
                      control={form.control}
                      name="title"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-[#E0E0E0]">Event Title</FormLabel>
                          <FormControl>
                            <Input placeholder="TBI Workshop Series" {...field} disabled={isSubmitting} 
                              className="bg-[#252525] border-[#3A3A3A] text-[#E0E0E0] focus:border-[#4F46E5] rounded-lg placeholder:text-[#6B7280]" />
                          </FormControl>
                          <FormMessage className="text-rose-400" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="description"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-[#E0E0E0]">Description</FormLabel>
                          <FormControl>
                            <Textarea 
                              placeholder="Provide a detailed description of the event..." 
                              {...field} 
                              className="min-h-[120px] bg-[#252525] border-[#3A3A3A] text-[#E0E0E0] focus:border-[#4F46E5] rounded-lg placeholder:text-[#6B7280]" 
                              disabled={isSubmitting} 
                            />
                          </FormControl>
                          <FormMessage className="text-rose-400" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="date"
                      render={({ field }) => (
                        <FormItem className="flex flex-col">
                          <FormLabel className="text-[#E0E0E0]">Date</FormLabel>
                          <Popover>
                            <PopoverTrigger asChild>
                              <FormControl>
                                <Button
                                  variant={"outline"}
                                  className={`w-full pl-3 text-left font-normal bg-[#252525] border-[#3A3A3A] text-[#E0E0E0] hover:bg-[#303030] rounded-lg ${!field.value && "text-[#6B7280]"}`}
                                  disabled={isSubmitting}>
                                  {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                                  <CalendarIcon className="ml-auto h-4 w-4 text-[#4F46E5] opacity-70" />
                                </Button>
                              </FormControl>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0 bg-[#1A1A1A] border-[#3A3A3A] text-[#E0E0E0] shadow-[0_4px_20px_rgba(0,0,0,0.3)] rounded-lg" align="start">
                              <Calendar
                                mode="single"
                                selected={field.value}
                                onSelect={field.onChange}
                                initialFocus
                                disabled={(date) => date < new Date(new Date().setHours(0, 0, 0, 0))}
                                className="bg-[#1A1A1A] text-[#E0E0E0]"
                              />
                            </PopoverContent>
                          </Popover>
                          <FormMessage className="text-rose-400" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="time"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-[#E0E0E0]">Time (24-hour format)</FormLabel>
                          <FormControl>
                            <Input type="text" placeholder="14:30" {...field} disabled={isSubmitting} 
                              className="bg-[#252525] border-[#3A3A3A] text-[#E0E0E0] focus:border-[#4F46E5] rounded-lg placeholder:text-[#6B7280]" />
                          </FormControl>
                          <FormMessage className="text-rose-400" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="venue"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-[#E0E0E0]">Venue</FormLabel>
                          <FormControl>
                            <Input placeholder="TBI Conference Room" {...field} disabled={isSubmitting} 
                              className="bg-[#252525] border-[#3A3A3A] text-[#E0E0E0] focus:border-[#4F46E5] rounded-lg placeholder:text-[#6B7280]" />
                          </FormControl>
                          <FormMessage className="text-rose-400" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="applyLink"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-[#E0E0E0]">Application Link (Optional)</FormLabel>
                          <FormControl>
                            <Input type="url" placeholder="https://example.com/apply" {...field} disabled={isSubmitting} 
                              className="bg-[#252525] border-[#3A3A3A] text-[#E0E0E0] focus:border-[#4F46E5] rounded-lg placeholder:text-[#6B7280]" />
                          </FormControl>
                          <FormMessage className="text-rose-400" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="imageUrl"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-[#E0E0E0]">Image URL (Optional)</FormLabel>
                          <FormControl>
                            <Input type="url" placeholder="https://placehold.co/600x400.png" {...field} disabled={isSubmitting} 
                              className="bg-[#252525] border-[#3A3A3A] text-[#E0E0E0] focus:border-[#4F46E5] rounded-lg placeholder:text-[#6B7280]" />
                          </FormControl>
                          <FormMessage className="text-rose-400" />
                          <p className="text-xs text-[#9CA3AF]">For now, please provide a URL. Direct upload coming soon.</p>
                        </FormItem>
                      )}
                    />
                    <DialogFooter>
                      <Button type="button" variant="outline" onClick={() => setIsCreateDialogOpen(false)} disabled={isSubmitting}
                        className="border-[#3A3A3A] text-[#E0E0E0] hover:bg-[#252525] rounded-lg">
                        Cancel
                      </Button>
                      <Button type="submit" disabled={isSubmitting}
                        className="bg-[#4F46E5] hover:bg-[#4338CA] text-white rounded-lg shadow-[0_4px_10px_rgba(79,70,229,0.3)] transform transition-transform hover:scale-105">
                        {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                        Create Event
                      </Button>
                    </DialogFooter>
                  </form>
                </Form>
              </DialogContent>
            </Dialog>
          </div>
        </CardHeader>
        <CardContent className="bg-[#121212] p-6">
          {isLoading ? (
            <div className="flex justify-center items-center py-10">
              <Loader2 className="h-8 w-8 animate-spin text-[#4F46E5]" />
              <span className="ml-2 text-[#9CA3AF]">Loading events...</span>
            </div>
          ) : error ? (
            <div className="text-rose-500 flex flex-col items-center py-10">
              <AlertCircle className="h-8 w-8 mb-2" />
              <p className="font-semibold">Error loading events</p>
              <p>{error}</p>
              <Button onClick={fetchEvents} variant="outline" className="mt-4 border-[#2A2A2A] text-[#E0E0E0] hover:bg-[#252525] rounded-lg">Try Again</Button>
            </div>
          ) : events.length === 0 ? (
            <div className="text-center py-10">
              <CalendarIcon className="mx-auto h-12 w-12 text-[#4F46E5] opacity-70 mb-4" />
              <p className="text-[#9CA3AF]">No events found. Get started by creating one!</p>
            </div>
          ) : (
            <div className="overflow-x-auto rounded-xl border border-[#2A2A2A] shadow-[0_4px_20px_rgba(0,0,0,0.2)]">
              <Table className="w-full">
                <TableHeader className="bg-[#1A1A1A]">
                  <TableRow>
                    <TableHead className="text-[#E0E0E0] font-semibold uppercase text-xs tracking-wider py-4 px-4 border-b border-[#2A2A2A]">Title</TableHead>
                    <TableHead className="text-[#E0E0E0] font-semibold uppercase text-xs tracking-wider py-4 px-4 border-b border-[#2A2A2A]">Date</TableHead>
                    <TableHead className="text-[#E0E0E0] font-semibold uppercase text-xs tracking-wider py-4 px-4 border-b border-[#2A2A2A]">Time</TableHead>
                    <TableHead className="text-[#E0E0E0] font-semibold uppercase text-xs tracking-wider py-4 px-4 border-b border-[#2A2A2A]">Venue</TableHead>
                    <TableHead className="text-[#E0E0E0] font-semibold uppercase text-xs tracking-wider py-4 px-4 border-b border-[#2A2A2A] text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {events.map((event, index) => (
                    <TableRow key={event.id} className={`${index % 2 === 0 ? 'bg-[#121212]' : 'bg-[#1E1E1E]'} hover:bg-[#252525] transition-colors duration-200`}>
                      <TableCell className="font-medium py-4 px-4 border-b border-[#2A2A2A] text-[#E0E0E0]">{event.title}</TableCell>
                      <TableCell className="py-4 px-4 border-b border-[#2A2A2A] text-[#E0E0E0]">{format(new Date(event.date), "PP")}</TableCell>
                      <TableCell className="py-4 px-4 border-b border-[#2A2A2A] text-[#E0E0E0]">{event.time}</TableCell>
                      <TableCell className="py-4 px-4 border-b border-[#2A2A2A] text-[#E0E0E0]">{event.venue}</TableCell>
                      <TableCell className="py-4 px-4 border-b border-[#2A2A2A] text-right space-x-2">
                        <Button variant="ghost" size="icon" className="rounded-full h-8 w-8 text-[#E0E0E0] hover:text-[#4F46E5] hover:bg-[#1A1A1A] transition-colors" disabled> 
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button variant="ghost" size="icon" className="rounded-full h-8 w-8 text-rose-500 hover:text-rose-400 hover:bg-rose-500/10 transition-colors" disabled> 
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
